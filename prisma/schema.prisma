generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // Ignore
  session_state     String? // Ignore

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  //@@map("account")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String        @id @default(cuid())
  name            String? // Ignore
  email           String?       @unique
  emailVerified   DateTime? // Ignore
  image           String?
  username        String?       @unique
  global_name     String?
  accessToken     String?
  refreshToken    String?
  expires         Int?
  joinGuild       Boolean       @default(false)
  role            Role          @default(USER)
  lastPixelPlaced DateTime?
  accounts        Account[]
  sessions        Session[]
  pixelActions    PixelAction[]

  //@@map("user")
}

model PixelAction {
  id         String   @id @default(cuid())
  x          Int
  y          Int
  colorIndex Int
  userId     String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([x, y])
  @@index([createdAt])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}
