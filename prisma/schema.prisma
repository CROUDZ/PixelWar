generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * generator client {
 * provider = "prisma-client-js"
 * }
 * datasource db {
 * provider = "postgresql"
 * url      = env("DATABASE_URL")
 * }
 * model User {
 * id           String    @id @default(cuid())
 * email        String?   @unique
 * image        String?
 * global_name  String?
 * role         Role      @default(USER)
 * accessToken  String?
 * refreshToken String?
 * expires      Int?
 * join_guild   Boolean   @default(false)
 * username     String?
 * accounts     Account[]
 * sessions     Session[]
 * @@map("user")
 * }
 * model Account {
 * id                String  @id @default(cuid())
 * provider          String
 * providerAccountId String
 * type              String
 * token_type        String?
 * access_token      String?
 * refresh_token     String?
 * expires_at        Int?
 * scope             String?
 * userId            String
 * user              User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation explicite à User
 * @@unique([provider, providerAccountId])
 * @@map("account")
 * }
 * model Session {
 * id           String   @id @default(cuid())
 * sessionToken String   @unique
 * userId       String
 * expires      DateTime
 * join_guild   Boolean  @default(false)
 * user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation explicite à User
 * @@map("session")
 * }
 * enum Role {
 * USER
 * MODERATOR
 * ADMIN
 * }
 */
